export default {
	name: "tik",
	version: "1.0.1",
	hasPermssion: 0,
	credits: "NDKh√°nh",
	description: "L·∫•y [info/video] TikTok",
	shortDescription: "[info/video]",
	usages: [
		'tik info <xxxx>: L·∫•y info Tik Tok b·∫±ng id',
		'tik video <xxxx>: t·∫£i video Tik Tok kh√¥ng logo b·∫±ng link'
	],
	cooldowns: 5
};

import axios from 'axios';
import tiktok from 'tiktok-scraper';
import fs from 'fs-extra';
import ps, { dirname } from "path";
import { fileURLToPath } from 'url';
const __dirname = dirname(fileURLToPath(import.meta.url));

export async function run({ api, event, args, utils }) {
	try {
		switch (args[0]) {
			case "-i":
			case "info": {
				if (!args.slice(1).join(" ") != " ") return api.sendMessage("[ TIK TOK INFO ]\n¬ª B·∫°n ph·∫£i nh·∫≠p ID Tik Tok!", event.threadID, event.messageID);
				const options = {
					number: 100,
					by_user_id: true,
					sessionList: ['sid_tt=cf1971e064e2e47e2f11d4abfe4ac7e8s']
				};

				try {
					const user = await tiktok.getUserProfileInfo(args.slice(1).join(" "), options);
					const id = user.user.uniqueId;
					const name = user.user.nickname;
					const followe = user.stats.followerCount;
					const followi = user.stats.followingCount;
					const video = user.stats.videoCount;
					const abc = user.user.signature;
					const tym = user.stats.heart;
					const img = user.user.avatarMedium;
					const path = ps.resolve(__dirname, 'cache', `TikTok.png`);
					await utils.downloadFile(img, path);
					const body = `üëÄT√™n: ${name}\nü™ßID: ${id}\n${abc}\n‚úÖFollower: ${parseInt(followe).toLocaleString()}\n‚ùåFollowing: ${parseInt(followi).toLocaleString()}\nüíóS·ªë l∆∞·ª£t tym: ${parseInt(tym).toLocaleString()}\nüñ•S·ªë video: ${parseInt(video).toLocaleString()} `
					return api.sendMessage({ body: body, attachment: fs.createReadStream(path) }, event.threadID, () => fs.unlinkSync(path), event.messageID);
				} catch {
					return api.sendMessage("[ TIK TOK INFO ]\n¬ª ID kh√¥ng ƒë√∫ng ho·∫∑c ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!", event.threadID, event.messageID);
				}
			}
			case "-v":
			case "video": {
				try {
					if (!args.slice(1).join(" ") != " ") return api.sendMessage("[ TIK TOK VIDEO ]\n¬ª B·∫°n ph·∫£i nh·∫≠p URL VIDOE Tik Tok!", event.threadID, event.messageID);
					api.sendMessage(`[ VIDEO DOWNLOAD ]\n‚ä± ‚ãÖ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ‚ãÖ ‚ä∞\nXin Vui l√≤ng ƒê·ª£i !`, event.threadID, (err, info) =>
						setTimeout(() => { api.unsendMessage(info.messageID) }, 5000));
					const path = ps.resolve(__dirname, 'cache', `TikTok.mp4`);
					await utils.downloadFile(encodeURI(`https://sumichan.tk/tiktok?url=${args.slice(1).join(" ")}&type=video`), path);
					if (fs.statSync(path).size > 26214400) return api.sendMessage('Kh√¥ng th·ªÉ g·ª≠i file v√¨ dung l∆∞·ª£ng l·ªõn h∆°n 25MB.', event.threadID, () => fs.unlinkSync(path), event.messageID);
					else return api.sendMessage({ body: "Loading success ‚úÖ", attachment: fs.createReadStream(path) }, event.threadID, () => fs.unlinkSync(path), event.messageID)
				} catch (e) {
					console.log(e)
					return api.sendMessage('Kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n!', event.threadID, event.messageID);
				}
			}
			default: {
				return utils.throwError(this.config.name, event.threadID, event.messageID);
			}
		}
	} catch (e) {
		console.log(e)
	}
}
